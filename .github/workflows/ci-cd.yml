name: CI/CD Pipeline
on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
env:
  PYTHON_VERSION: 3.9
  IMAGE_NAME: wine-hypothesis-api

jobs:
  # Code Quality and Testing
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort pytest-cov bandit safety
    
    - name: Code formatting check (Black)
      run: black --check --diff app/ test*.py
      continue-on-error: true
    
    - name: Import sorting check (isort)
      run: isort --check-only --diff app/ test*.py
      continue-on-error: true
    
    - name: Lint with flake8
      run: |
        # Stop build if there are Python syntax errors or undefined names
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
      continue-on-error: true
    
    - name: Security check with bandit
      run: bandit -r app/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Check dependencies for vulnerabilities
      run: safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Run tests with pytest
      run: |
        pytest -v --cov=app --cov-report=xml --cov-report=html --cov-report=term
  #pytest test*.py -v --cov=app --cov-report=xml --cov-report=html --cov-report=term
    
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports-${{ matrix.python-version }}
        path: |
          htmlcov/
          bandit-report.json
          safety-report.json

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      if: github.ref == 'refs/heads/master'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.ref == 'refs/heads/master' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration:
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install httpx pytest-asyncio
    
    - name: Create __init__.py files
      run: |
        touch app/__init__.py
        touch app/ml_utils.py
        touch app/visualization.py
    
    - name: Start API server
      run: |
        export PYTHONPATH=$PYTHONPATH:$(pwd)
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        echo "Waiting for server to start..."
        for i in {1..30}; do
          if curl -f http://localhost:8000/docs; then
            echo "Server is up!"
            break
          else
            echo "Waiting... ($i/30)"
            sleep 2
          fi
        done
    
    - name: Run integration tests
      run: |
        export PYTHONPATH=$PYTHONPATH:$(pwd)
        pytest test*.py -v --maxfail=1
    
    - name: API Health Check
      run: |
        curl -f http://localhost:8000/docs || exit 1

  performance:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust
    
    - name: Create __init__.py files
      run: |
        touch app/__init__.py
        touch app/ml_utils.py
        touch app/visualization.py
    
    - name: Start API server
      run: |
        export PYTHONPATH=$PYTHONPATH:$(pwd)
        uvicorn app.main:app --host 0.0.0.0 --port 8000 > server.log 2>&1 &
        echo "Waiting for server to start..."
        for i in {1..30}; do
          if curl -f http://localhost:8000/docs; then
            echo "Server is up!"
            break
          else
            echo "Waiting... ($i/30)"
            sleep 2
          fi
        done
    
    - name: Run performance tests
      run: |
        echo "
        from locust import HttpUser, task, between
        
        class ApiUser(HttpUser):
            wait_time = between(1, 3)
            
            def on_start(self):
                # Train model first
                self.client.post('/train_model', json={
                    'test_size': 0.2,
                    'random_state': 42,
                    'n_neighbors': 5
                })
            
            @task(3)
            def test_evaluate_model(self):
                self.client.post('/evaluate_model', json={})
            
            @task(2)
            def test_feature_significance(self):
                self.client.post('/feature_significance', json={
                    'feature': 'alcohol',
                    'bins': 3
                })
            
            @task(1)
            def test_model_vs_random(self):
                self.client.post('/model_vs_random', json={})
        " > locustfile.py
        
        locust --host=http://localhost:8000 -u 10 -r 2 -t 30s --headless --html performance-report.html
    
    - name: Upload performance report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: |
          performance-report.html
          server.log

  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    
    steps:
    - name: Deploy notification
      run: |
        echo "Deployment step - Configure your deployment strategy here"